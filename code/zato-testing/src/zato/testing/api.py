# -*- coding: utf-8 -*-

"""
Copyright (C) 2021, Zato Source s.r.o. https://zato.io

Licensed under LGPLv3, see LICENSE.txt for terms and conditions.
"""

# ################################################################################################################################
# ################################################################################################################################

if 0:
    from typing import Union

    Union = Union

# ################################################################################################################################
# ################################################################################################################################

class ParallelServer:
    def __init__(self):
        self.api = PublicAPI()

# ################################################################################################################################
# ################################################################################################################################

class _ChannelResponse:
    def zzz():
        pass

# ################################################################################################################################
# ################################################################################################################################

class _ChannelImpl:
    def __init__(self, name):
        self.name = name

    def invoke(self, request=None):
        # type: (Union[str, dict]) -> _ChannelResponse
        pass

# ################################################################################################################################
# ################################################################################################################################

class Channel:

    def get(self, name):
        # type: (str) -> _ChannelImpl

    def invoke(self, name, request):
        # type: (str) -> _ChannelImpl
        pass

# ################################################################################################################################
# ################################################################################################################################

class ChannelREST(Channel):
    pass

# ################################################################################################################################
# ################################################################################################################################

class ChannelAPI:
    def __init__(self):
        self.rest = ChannelREST()

# ################################################################################################################################
# ################################################################################################################################

class PublicAPI:
    def __init__(self):
        self.channel = ChannelAPI()

# ################################################################################################################################
# ################################################################################################################################

class ZatoTestCase:

    def __init__(self):
        pass

    def test_create_customer(self):
        server = ParallelServer()

        server.api.channel.rest.get('aaa')

# ################################################################################################################################
# ################################################################################################################################
